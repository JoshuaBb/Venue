buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq-codegen:3.19.6"
        classpath "org.postgresql:postgresql:42.7.3"
    }
}

plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.17'
    id "application"
    id "org.jooq.jooq-codegen-gradle" version "3.19.6"
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    javaMainClass = "address.MainServer"
    grpcVersion = "1.62.2"
    logbackVersion = "1.5.3"
    jooqVersion = "3.19.6"
    postgresDriverVersion = "42.7.3"
}

application {
    mainClassName = javaMainClass
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // GRPC
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation 'com.google.protobuf:protobuf-java:3.19.4' // Protobuf runtime

    // Logging
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation 'org.slf4j:slf4j-api:2.0.12'

    // Serialization
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.0'

    // Persistence
    implementation "org.jooq:jooq:${jooqVersion}"
    implementation "org.jooq:jooq-meta:${jooqVersion}"
    implementation "org.jooq:jooq-codegen:${jooqVersion}"

    jooqCodegen "org.jooq:jooq:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-meta:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-codegen:${jooqVersion}"
    jooqCodegen "org.postgresql:postgresql:${postgresDriverVersion}"

    // Postgres
    implementation "org.postgresql:postgresql:${postgresDriverVersion}"
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.19.4' }

    plugins {
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.42.0' }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }

            task.plugins {
                grpc { // Enable gRPC
                }
            }
        }
    }

    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceSets {
    main {
        java {
            srcDirs 'src/generated/main/java', 'src/generated/main/grpc'
        }
    }
}

jooq {
    configuration {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/postgres'
            user = 'docker'
            password = 'example'
        }
        generator {
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                outputSchema = 'public'
                includes = '.*'
                excludes = ''
            }
            generate {
                daos = true
                pojos = true
            }
            target {
                packageName = 'dao.jooq'
                directory = 'src/main'
            }
        }
    }
}
