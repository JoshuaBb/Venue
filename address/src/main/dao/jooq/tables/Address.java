/*
 * This file is generated by jOOQ.
 */
package dao.jooq.tables;


import dao.jooq.Keys;
import dao.jooq.Public;
import dao.jooq.tables.records.AddressRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>public.address.address_id</code>.
     */
    public final TableField<AddressRecord, Integer> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.address.address_line_one</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_LINE_ONE = createField(DSL.name("address_line_one"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.address.address_line_two</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_LINE_TWO = createField(DSL.name("address_line_two"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.address.address_line_three</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_LINE_THREE = createField(DSL.name("address_line_three"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.address.address_line_four</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_LINE_FOUR = createField(DSL.name("address_line_four"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.address.city</code>.
     */
    public final TableField<AddressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.address.state_or_province</code>.
     */
    public final TableField<AddressRecord, String> STATE_OR_PROVINCE = createField(DSL.name("state_or_province"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.address.zip_or_postal</code>.
     */
    public final TableField<AddressRecord, String> ZIP_OR_POSTAL = createField(DSL.name("zip_or_postal"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.address.country_code</code>.
     */
    public final TableField<AddressRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.address.latitude</code>.
     */
    public final TableField<AddressRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.address.longitude</code>.
     */
    public final TableField<AddressRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.address.created_at</code>.
     */
    public final TableField<AddressRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.address.place_id</code>.
     */
    public final TableField<AddressRecord, String> PLACE_ID = createField(DSL.name("place_id"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>public.address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AddressRecord, Integer> getIdentity() {
        return (Identity<AddressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    @Override
    public List<UniqueKey<AddressRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ADDRESS_ADDRESS_LINE_ONE_KEY);
    }

    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    @Override
    public Address as(Table<?> alias) {
        return new Address(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Table<?> name) {
        return new Address(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Condition condition) {
        return new Address(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Address where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Address whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
