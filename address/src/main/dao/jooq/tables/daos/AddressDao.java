/*
 * This file is generated by jOOQ.
 */
package dao.jooq.tables.daos;


import dao.jooq.tables.Address;
import dao.jooq.tables.records.AddressRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AddressDao extends DAOImpl<AddressRecord, dao.jooq.tables.pojos.Address, Integer> {

    /**
     * Create a new AddressDao without any configuration
     */
    public AddressDao() {
        super(Address.ADDRESS, dao.jooq.tables.pojos.Address.class);
    }

    /**
     * Create a new AddressDao with an attached configuration
     */
    public AddressDao(Configuration configuration) {
        super(Address.ADDRESS, dao.jooq.tables.pojos.Address.class, configuration);
    }

    @Override
    public Integer getId(dao.jooq.tables.pojos.Address object) {
        return object.getAddressId();
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfAddressId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByAddressId(Integer... values) {
        return fetch(Address.ADDRESS.ADDRESS_ID, values);
    }

    /**
     * Fetch a unique record that has <code>address_id = value</code>
     */
    public dao.jooq.tables.pojos.Address fetchOneByAddressId(Integer value) {
        return fetchOne(Address.ADDRESS.ADDRESS_ID, value);
    }

    /**
     * Fetch a unique record that has <code>address_id = value</code>
     */
    public Optional<dao.jooq.tables.pojos.Address> fetchOptionalByAddressId(Integer value) {
        return fetchOptional(Address.ADDRESS.ADDRESS_ID, value);
    }

    /**
     * Fetch records that have <code>address_line_one BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfAddressLineOne(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_LINE_ONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_line_one IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByAddressLineOne(String... values) {
        return fetch(Address.ADDRESS.ADDRESS_LINE_ONE, values);
    }

    /**
     * Fetch a unique record that has <code>address_line_one = value</code>
     */
    public dao.jooq.tables.pojos.Address fetchOneByAddressLineOne(String value) {
        return fetchOne(Address.ADDRESS.ADDRESS_LINE_ONE, value);
    }

    /**
     * Fetch a unique record that has <code>address_line_one = value</code>
     */
    public Optional<dao.jooq.tables.pojos.Address> fetchOptionalByAddressLineOne(String value) {
        return fetchOptional(Address.ADDRESS.ADDRESS_LINE_ONE, value);
    }

    /**
     * Fetch records that have <code>address_line_two BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfAddressLineTwo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_LINE_TWO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_line_two IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByAddressLineTwo(String... values) {
        return fetch(Address.ADDRESS.ADDRESS_LINE_TWO, values);
    }

    /**
     * Fetch records that have <code>address_line_three BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfAddressLineThree(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_LINE_THREE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_line_three IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByAddressLineThree(String... values) {
        return fetch(Address.ADDRESS.ADDRESS_LINE_THREE, values);
    }

    /**
     * Fetch records that have <code>address_line_four BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfAddressLineFour(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ADDRESS_LINE_FOUR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_line_four IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByAddressLineFour(String... values) {
        return fetch(Address.ADDRESS.ADDRESS_LINE_FOUR, values);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByCity(String... values) {
        return fetch(Address.ADDRESS.CITY, values);
    }

    /**
     * Fetch records that have <code>state_or_province BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfStateOrProvince(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.STATE_OR_PROVINCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state_or_province IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByStateOrProvince(String... values) {
        return fetch(Address.ADDRESS.STATE_OR_PROVINCE, values);
    }

    /**
     * Fetch records that have <code>zip_or_postal BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfZipOrPostal(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.ZIP_OR_POSTAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>zip_or_postal IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByZipOrPostal(String... values) {
        return fetch(Address.ADDRESS.ZIP_OR_POSTAL, values);
    }

    /**
     * Fetch records that have <code>country_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfCountryCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.COUNTRY_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_code IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByCountryCode(String... values) {
        return fetch(Address.ADDRESS.COUNTRY_CODE, values);
    }

    /**
     * Fetch records that have <code>latitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfLatitude(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Address.ADDRESS.LATITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>latitude IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByLatitude(BigDecimal... values) {
        return fetch(Address.ADDRESS.LATITUDE, values);
    }

    /**
     * Fetch records that have <code>longitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfLongitude(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Address.ADDRESS.LONGITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>longitude IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByLongitude(BigDecimal... values) {
        return fetch(Address.ADDRESS.LONGITUDE, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Address.ADDRESS.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Address.ADDRESS.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>place_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchRangeOfPlaceId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.PLACE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>place_id IN (values)</code>
     */
    public List<dao.jooq.tables.pojos.Address> fetchByPlaceId(String... values) {
        return fetch(Address.ADDRESS.PLACE_ID, values);
    }
}
